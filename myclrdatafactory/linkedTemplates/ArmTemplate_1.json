{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "myclrdatafactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/BulkCopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy huge amount of data in bulk from database using external control table to store source table list with partitions for each table.\n\nWhen you want to migrate data from your data warehouse like Oracle server, Netezza server, Teradata server or SQL Server to Azure, you have to load huge amount of data from multiple tables in data sources. In most cases, data has to be further partitioned in each table so that you can load rows with multiple threads in parallel from single table.",
				"activities": [
					{
						"name": "GetPartitionList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select @{pipeline().parameters.Control_Table_Schema_PartitionID} as PartitionID, @{pipeline().parameters.Control_Table_Schema_SourceTableName} as SourceTableName, @{pipeline().parameters.Control_Table_Schema_FilterQuery} as FilterQuery from @{pipeline().parameters.Control_Table_Name}",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabaseExternal_ControlTable2",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.Control_Table_Name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachPartition",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetPartitionList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetPartitionList').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "CopyOnePartition",
									"description": "Copy activity to copy each partition from source database store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderQuery": {
												"value": "@item().FilterQuery",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "SqlServerDataSource2",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DataDestination1",
											"type": "DatasetReference",
											"parameters": {
												"Data_Destination_Container": {
													"value": "@pipeline().parameters.Data_Destination_Container",
													"type": "Expression"
												},
												"Data_Destination_Directory": {
													"value": "@pipeline().parameters.Data_Destination_Directory",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"Control_Table_Name": {
						"type": "String"
					},
					"Control_Table_Schema_PartitionID": {
						"type": "String"
					},
					"Control_Table_Schema_SourceTableName": {
						"type": "String"
					},
					"Control_Table_Schema_FilterQuery": {
						"type": "String"
					},
					"Data_Destination_Container": {
						"type": "String"
					},
					"Data_Destination_Directory": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-01-20T19:01:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BulkCopy_copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy huge amount of data in bulk from database using external control table to store source table list with partitions for each table.\n\nWhen you want to migrate data from your data warehouse like Oracle server, Netezza server, Teradata server or SQL Server to Azure, you have to load huge amount of data from multiple tables in data sources. In most cases, data has to be further partitioned in each table so that you can load rows with multiple threads in parallel from single table.",
				"activities": [
					{
						"name": "GetPartitionList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select @{pipeline().parameters.Control_Table_Schema_PartitionID} as PartitionID, @{pipeline().parameters.Control_Table_Schema_SourceTableName} as SourceTableName, @{pipeline().parameters.Control_Table_Schema_FilterQuery} as FilterQuery from @{pipeline().parameters.Control_Table_Name}",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabaseExternal_ControlTable2",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.Control_Table_Name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachPartition",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetPartitionList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetPartitionList').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "CopyOnePartition",
									"description": "Copy activity to copy each partition from source database store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderQuery": {
												"value": "@item().FilterQuery",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "SqlServerDataSource2",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DataDestination1",
											"type": "DatasetReference",
											"parameters": {
												"Data_Destination_Container": {
													"value": "@pipeline().parameters.Data_Destination_Container",
													"type": "Expression"
												},
												"Data_Destination_Directory": {
													"value": "@pipeline().parameters.Data_Destination_Directory",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"Control_Table_Name": {
						"type": "String"
					},
					"Control_Table_Schema_PartitionID": {
						"type": "String"
					},
					"Control_Table_Schema_SourceTableName": {
						"type": "String"
					},
					"Control_Table_Schema_FilterQuery": {
						"type": "String"
					},
					"Data_Destination_Container": {
						"type": "String"
					},
					"Data_Destination_Directory": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-12-18T02:22:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeltaCopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select @{pipeline().parameters.Control_Table_Column_Name} as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabaseExternal_ControlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select MAX(',pipeline().parameters.Data_Source_WaterMarkColumn, ') as NewWatermarkValue from ',pipeline().parameters.Data_Source_Table_Name)",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select * from @{pipeline().parameters.Data_Source_Table_Name} where @{pipeline().parameters.Data_Source_WaterMarkColumn} > '@{activity('LookupLastWaterMark').output.firstRow.WatermarkValue}' and @{pipeline().parameters.Data_Source_WaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "SqlServerDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataDestination",
								"type": "DatasetReference",
								"parameters": {
									"Data_Destination_Container": {
										"value": "@pipeline().parameters.Data_Destination_Container",
										"type": "Expression"
									},
									"Data_Destination_Directory": {
										"value": "@pipeline().parameters.Data_Destination_Directory",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[update_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_AZURE_SQL_DATABASE",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String"
					},
					"Data_Destination_Container": {
						"type": "String"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String"
					},
					"Control_Table_Column_Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-01-20T19:00:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_INCREMENTALLY_COPY')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get_Config_Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [SourceID]\n      ,[SourceType]\n      ,[SchemaName]\n      ,[SourceTableName]\n      ,[FilterQuery]\n      ,[WaterMarkColumn]\n      ,[WaterMarkValue]\n  FROM [dbo].[ADF_Config]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_ADF_CONFIG",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Table Copy data",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get_Config_Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get_Config_Table').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get_Source_Watermark",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@CONCAT('SELECT MAX(',item().WaterMarkColumn,') as NewWaterMarkColumnVal FROM ', item().SchemaName,'.',item().SourceTableName)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_SQL_MAX_SOURCE_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Copy From Source to Dest",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Get_Source_Watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@CONCAT(item().FilterQuery,' WHERE ',item().WaterMarkColumn,'>','''',item().WaterMarkValue,'''',' AND ',item().WaterMarkColumn,'<=','''',activity('Get_Source_Watermark').output.firstRow.NewWaterMarkColumnVal,'''','')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings",
												"filePattern": "setOfObjects"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_SOURCE_TABLE",
											"type": "DatasetReference",
											"parameters": {
												"DS_TABLE_NAME": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_BLOBSTORE",
											"type": "DatasetReference",
											"parameters": {
												"DEST_FOLDERNAME": {
													"value": "@{item().SourceTableName}",
													"type": "Expression"
												},
												"DEST_FILENAME": {
													"value": "@{concat(item().SourceTableName,pipeline().TriggerTime)}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Update WaterMark in Config",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy From Source to Dest",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_update_config_watermark]",
										"storedProcedureParameters": {
											"LastModifiedtime": {
												"value": {
													"value": "@{activity('Get_Source_Watermark').output.firstRow.NewWaterMarkColumnVal}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"SourceTableName": {
												"value": {
													"value": "@{item().SourceTableName}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceType": {
												"value": {
													"value": "@{item().SourceType}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_AZURE_SQL_DATABASE",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-01-12T05:20:22Z"
			},
			"dependsOn": []
		}
	]
}